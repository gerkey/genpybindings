find_package(Boost COMPONENTS python)
include_directories(${Boost_INCLUDE_DIRS})

find_package(PythonLibs)
include_directories(${PYTHON_INCLUDE_PATH})

#Make sure we can find buildspace generated messages
include_directories(${CMAKE_BINARY_DIR}/gen/cpp)

if(@PACKAGE_NAME@_SOURCE_DIR)
  find_program_required(GENPYBINDINGS_BIN gen_pybindings.py PATHS ${@PACKAGE_NAME@_SOURCE_DIR}/scripts)
  set(GENPYBINDINGS_TEMPLATE_DIR ${@PACKAGE_NAME@_SOURCE_DIR}/scripts)
else()
  find_program_required(GENPYBINDINGS_BIN gen_pybindings.py)
  set(GENPYBINDINGS_TEMPLATE_DIR ${CMAKE_INSTALL_PREFIX}/share/genpybindings)
endif()

# Generate .cpp
# The generated .h files should be added ALL_GEN_OUTPUT_FILES_cpp
macro(_generate_msg_pybindings ARG_PKG ARG_MSG ARG_IFLAGS ARG_MSG_DEPS ARG_GEN_OUTPUT_DIR)

  #Create input and output filenames
  get_filename_component(MSG_NAME ${ARG_MSG} NAME)
  get_filename_component(MSG_SHORT_NAME ${ARG_MSG} NAME_WE)

  set(MSG_GENERATED_NAME ${MSG_SHORT_NAME}.cpp)
  set(GEN_OUTPUT_FILE ${ARG_GEN_OUTPUT_DIR}/${MSG_GENERATED_NAME})

  assert(CATKIN_ENV)
  add_custom_command(OUTPUT ${GEN_OUTPUT_FILE}
    DEPENDS ${GENPYBINDINGS_BIN} ${ARG_MSG} ${ARG_MSG_DEPS}
    ${GENPYBINDINGS_TEMPLATE_DIR}/msg.cpp.template
    ${GENPYBINDINGS_TEMPLATE_DIR}/srv.cpp.template
    COMMAND ${CATKIN_ENV} ${GENPYBINDINGS_BIN} ${ARG_MSG}
    ${ARG_IFLAGS}
    -p ${ARG_PKG}
    -o ${ARG_GEN_OUTPUT_DIR}
    -e ${GENPYBINDINGS_TEMPLATE_DIR}
    COMMENT "Generating boost::python code from ${ARG_PKG}/${MSG_NAME}"
    )

   list(APPEND ALL_GEN_OUTPUT_FILES_pybindings ${GEN_OUTPUT_FILE})
endmacro()

# Generate .cpp
# The generated .h files should be added ALL_GEN_OUTPUT_FILES_cpp
macro(_generate_srv_pybindings ARG_PKG ARG_MSG ARG_IFLAGS ARG_MSG_DEPS ARG_GEN_OUTPUT_DIR)

  #Create input and output filenames
  get_filename_component(MSG_NAME ${ARG_MSG} NAME)
  get_filename_component(MSG_SHORT_NAME ${ARG_MSG} NAME_WE)

  set(MSG_GENERATED_NAME ${MSG_SHORT_NAME}.cpp)
  set(GEN_OUTPUT_FILES 
    ${ARG_GEN_OUTPUT_DIR}/${MSG_SHORT_NAME}.cpp 
    ${ARG_GEN_OUTPUT_DIR}/${MSG_SHORT_NAME}Request.cpp 
    ${ARG_GEN_OUTPUT_DIR}/${MSG_SHORT_NAME}Response.cpp
    )

  assert(CATKIN_ENV)
  add_custom_command(OUTPUT ${GEN_OUTPUT_FILES}
    DEPENDS ${GENPYBINDINGS_BIN} ${ARG_MSG} ${ARG_MSG_DEPS}
    ${GENPYBINDINGS_TEMPLATE_DIR}/msg.cpp.template
    ${GENPYBINDINGS_TEMPLATE_DIR}/srv.cpp.template
    COMMAND ${CATKIN_ENV} ${GENPYBINDINGS_BIN} ${ARG_MSG}
    ${ARG_IFLAGS}
    -p ${ARG_PKG}
    -o ${ARG_GEN_OUTPUT_DIR}
    -e ${GENPYBINDINGS_TEMPLATE_DIR}
    COMMENT "Generating boost::python code from ${ARG_PKG}/${MSG_NAME}"
    )

   list(APPEND ALL_GEN_OUTPUT_FILES_pybindings ${GEN_OUTPUT_FILES})
endmacro()

macro(_generate_module_pybindings ARG_PKG ARG_GEN_OUTPUT_DIR ARG_GENERATED_FILES)

  # create a module.cpp file here
  # calling all the export_MSG functions
  # BOOST_PYTHON_MODULE(std_msgs)
  # {
  #   export_MSG1();
  #   export_MSG2();
  # }

  find_package(ROS REQUIRED COMPONENTS 
    cpp_common roscpp_serialization rostime roscpp_traits)

  include_directories(${ROS_INCLUDE_DIRS})

  set(GEN_OUTPUT_FILE ${ARG_GEN_OUTPUT_DIR}/module.cpp)

  assert(CATKIN_ENV)
  add_custom_command(OUTPUT ${GEN_OUTPUT_FILE}
    DEPENDS ${GENPYBINDINGS_BIN} ${ARG_GENERATED_FILES} ${ARG_MSG_DEPS}
    ${GENPYBINDINGS_TEMPLATE_DIR}/module.cpp.template
    COMMAND ${CATKIN_ENV} ${GENPYBINDINGS_BIN}
    -m
    -p ${ARG_PKG}
    -o ${ARG_GEN_OUTPUT_DIR}
    -e ${GENPYBINDINGS_TEMPLATE_DIR}
    COMMENT "Generating boost::python module for ${ARG_PKG}"
    )

  # rule to put __init__.py into build dir
  file(COPY ${GENPYBINDINGS_TEMPLATE_DIR}/__init__.py 
    DESTINATION ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${ARG_PKG}
    )

  # build module
  set(boost_lib_target "${ARG_PKG}/msg")

  file(MAKE_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${ARG_PKG})
  add_library(${boost_lib_target} SHARED ${ARG_GENERATED_FILES} ${GEN_OUTPUT_FILE})
  set_target_properties(${boost_lib_target} PROPERTIES 
    PREFIX "")

  add_dependencies(${boost_lib_target} ${ARG_PKG}_gencpp)
  target_link_libraries(${boost_lib_target} ${Boost_LIBRARIES} ${ROS_LIBRARIES} ${PYTHON_LIBRARIES})

endmacro()

set(genpybindings_INSTALL_DIR lib/pybindings)
